<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   enable-background="new 0 0 24 24"
   viewBox="0 0 24 24"
   fill="#FFFFFF"
   width="18px"
   height="18px"
   version="1.1"
   id="svg24"
   sodipodi:docname="dagbog_modded.svg"
   inkscape:version="1.0.1 (3bc2e813f5, 2020-09-07, custom)">
  <metadata
     id="metadata30">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <defs
     id="defs28" />
  <sodipodi:namedview
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="2558"
     inkscape:window-height="1724"
     id="namedview26"
     showgrid="false"
     inkscape:zoom="76.749962"
     inkscape:cx="9.4884622"
     inkscape:cy="9.3492027"
     inkscape:window-x="298"
     inkscape:window-y="52"
     inkscape:window-maximized="0"
     inkscape:current-layer="g911" />
  <script
     id="script2">(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g
     id="g6">
    <rect
       fill="none"
       height="24"
       width="24"
       id="rect4" />
  </g>
  <g
     id="g22">
    <g
       id="g8" />
    <g
       id="g20">
      <g
         id="g911"
         transform="translate(0.16323711,18.34708)">
        <path
           d="m 2.8367628,-14.322631 c 1.11,-0.35 2.33,-0.5 3.5,-0.5 1.95,0 4.0499992,0.4 5.4999992,1.5 0.190713,9.7994479 0.02976,7.5273274 0.05772,15.4511028 -1.35,-0.85 -3.8577182,-1.4511027 -5.5577182,-1.4511027 -1.65,0 -3.35,0.3 -4.75,1.05 -0.1,0.05 -0.15,0.05 -0.25,0.05 -0.25,0 -0.50000002,-0.25 -0.50000002,-0.5 V -13.322631 c 0.60000002,-0.45 1.25000002,-0.75 2.00000002,-1 z m 0,13.5000001 c 1.1,-0.35 2.3,-0.5 3.5,-0.5 1.7,0 3.6378606,0.495249 4.9878602,1.345251 L 11.310283,-11.36667 c -1.3499996,-0.85 -3.2735242,-1.455961 -4.9735242,-1.455961 -1.2,0 -2.4,0.15 -3.5,0.5 z"
           id="path10-1"
           sodipodi:nodetypes="csccscsscccsccscc"
           style="stroke-width:1" />
        <path
           d="m 20.836762,-14.322631 c -1.11,-0.35 -2.33,-0.5 -3.5,-0.5 -1.95,0 -4.05,0.4 -5.5,1.5 -0.08433,9.3372468 -0.01488,9.6630175 0.05772,15.4511028 1.35,-0.85 3.74228,-1.45110338 5.44228,-1.45110338 1.65,0 3.35,0.3 4.75,1.04999998 0.1,0.05 0.15,0.05 0.25,0.05 0.25,0 0.5,-0.25 0.5,-0.5 V -13.322631 c -0.6,-0.45 -1.25,-0.75 -2,-1 z m 0,13.4999994 c -1.1,-0.35 -2.3,-0.5 -3.5,-0.5 -1.7,0 -3.637861,0.495249 -4.987861,1.34525105 L 12.329782,-11.364912 c 1.35,-0.85 3.306984,-1.457719 5.006984,-1.457719 1.2,0 2.4,0.15 3.5,0.5 z"
           id="path10-3"
           sodipodi:nodetypes="csccscsscccsccscc"
           style="stroke-width:1" />
        <path
           d="m 17.514123,-8.7774195 c 0.88,0 1.73,0.09 2.5,0.26 V -10.03742 c -0.79,-0.15 -1.64,-0.24 -2.5,-0.24 -1.7,0 -3.24,0.2900005 -4.5,0.8300005 v 1.66 c 1.13,-0.64 2.7,-0.99 4.5,-0.99 z"
           id="path12-0"
           style="stroke-width:1" />
        <path
           d="m 13.014123,-6.7874195 v 1.66 c 1.13,-0.64 2.7,-0.99 4.5,-0.99 0.88,0 1.73,0.09 2.5,0.26 v -1.52 c -0.79,-0.15 -1.64,-0.24 -2.5,-0.24 -1.7,0 -3.24,0.3 -4.5,0.83 z"
           id="path14-4"
           style="stroke-width:1" />
        <path
           d="m 17.514123,-4.9474195 c -1.7,0 -3.24,0.29 -4.5,0.83 v 1.66 c 1.13,-0.64 2.7,-0.99 4.5,-0.99 0.88,0 1.73,0.09 2.5,0.26 v -1.52 c -0.79,-0.16 -1.64,-0.24 -2.5,-0.24 z"
           id="path16-4"
           style="stroke-width:1" />
      </g>
    </g>
  </g>
</svg>
